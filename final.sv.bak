module lab9(  input			CLOCK_50, 
				  input  [3:0]  KEY,
				  input PS2_KBCLK,
				  input PS2_KBDAT,


				  output [7:0]  LEDG,
				  output [17:0] LEDR,
				  output [6:0]  HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7,
				  
				  output [12:0] DRAM_ADDR,
				  output [1:0]  DRAM_BA,
				  output        DRAM_CAS_N,
				  output		    DRAM_CKE,
				  output		    DRAM_CS_N,
				  inout  [31:0] DRAM_DQ,
				  output  [3:0] DRAM_DQM,
				  output		    DRAM_RAS_N,
				  output		    DRAM_WE_N,
				  output		    DRAM_CLK
				  );
				 
				 
				 
				  logic			reset_h;
				  logic			keyCode;
				  logic			
				  
				  assign {reset_h}=~ (KEY[0]); 
				  
				  final_soc NiosII (  .clk_clk(CLOCK_50), 
											 .reset_reset_n(KEY[0]), 
											 .to_sw_sig_export(to_sw_sig), 
											 .to_hw_sig_export(to_hw_sig),
											 .to_sw_port_export(to_sw_port),
											 .to_hw_port_export(to_hw_port),
											 .sdram_wire_addr(DRAM_ADDR),    //  sdram_wire.addr
											 .sdram_wire_ba(DRAM_BA),      	//  .ba
											 .sdram_wire_cas_n(DRAM_CAS_N),    //  .cas_n
											 .sdram_wire_cke(DRAM_CKE),     	//  .cke
											 .sdram_wire_cs_n(DRAM_CS_N),      //  .cs_n
											 .sdram_wire_dq(DRAM_DQ),      	//  .dq
											 .sdram_wire_dqm(DRAM_DQM),     	//  .dqm
											 .sdram_wire_ras_n(DRAM_RAS_N),    //  .ras_n
											 .sdram_wire_we_n(DRAM_WE_N),      //  .we_n
											 .sdram_clk_clk(DRAM_CLK),			//  clock out to SDRAM from other PLL port
											 .keys_wire_export(KEY),
											 .led_wire_export(LEDG),
											 .keycode_export(keyCode),
											 .press_export(keyPress);
											 );
					/*						 
					 module keyboard(input logic Clk, psClk, psData, reset,
					 output logic [7:0] keyCode,
					 output logic press);
					 */
					keyboard Keyboard_inst (.Clk(CLOCK_50), .psClk(PS2_KBCLK), .psData(PS2_KBDAT), .reset(reset_h), .keyCode(keyCode), .press(keyPress))
											 
				 
					
									
					//hex out 
					HexDriver        Hex0 (.In0(),
											     .Out0(HEX0) );
					HexDriver        Hex1 (.In0(),
											     .Out0(HEX1) );
					HexDriver        Hex2 (.In0(),
											     .Out0(HEX2) );
					HexDriver        Hex3 (.In0(),
											     .Out0(HEX3) );
					HexDriver        Hex4 (.In0(),
											     .Out0(HEX4) );
					HexDriver        Hex5 (.In0(),
											     .Out0(HEX5) );
					HexDriver        Hex6 (.In0(),
											     .Out0(HEX6) );
					HexDriver        Hex7 (.In0(),
											     .Out0(HEX7) );							  
endmodule
