
module  Tank ( input Reset, frame_clk,
					input [7:0] keycode,
					input [9:0] WallXSize1, WallYSize1, WallX1, WallY1,
               output [9:0]  TankX, TankY,
					output [1:0] TankType,
					output [9:0] Xstart, Ystart,
					output Missile_on);
    
    logic [9:0] Tank_X_Pos, Tank_Y_Pos, Tank_Size/*Tank_X_Motion,Tank_Y_Motion*/;
	 
	 
	 
    parameter [9:0] Tank_X_Center=0;  // Center position on the X axis
    parameter [9:0] Tank_Y_Center=239;  // Center position on the Y axis
    parameter [9:0] Tank_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Tank_X_Max=256;     // Rightmost point on the X axis
    parameter [9:0] Tank_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Tank_Y_Max=256;     // Bottommost point on the Y axis
    parameter [9:0] Tank_X_Step=1;      // Step size on the X axis
    parameter [9:0] Tank_Y_Step=1;      // Step size on the Y axis
	

    assign Tank_Size = 16;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Tank
        if (Reset)  // Asynchronous Reset
        begin 
            //Tank_Y_Motion <= 10'd0; //Tank_Y_Step;
				//Tank_X_Motion <= 10'd0; //Tank_X_Step;
				Tank_Y_Pos <= Tank_Y_Center;
				Tank_X_Pos <= Tank_X_Center;
        end
        
		  else
			begin 
				TankType <=TankType;
				 case (keycode)
						8'h1a: //up
							begin
								TankType <= 2'b00;
								if ((Tank_Y_Pos + (~(Tank_Y_Step) + 1'b1)) > Tank_Y_Min)
								begin
									if((TankY + (~(Tank_Y_Step) + 1'b1) == WallY + WallYSize)&&(TankX + Tank_Size > WallX) && (TankX < WallX + WallXSize))
											begin
											end
									end
									else
									begin
										Tank_X_Pos <= Tank_X_Pos;
										Tank_Y_Pos<=Tank_Y_Pos+ (~ (Tank_Y_Step) + 1'b1);
									end	
								end
							end
						8'h16: //down
							begin
								TankType <=2'b10;
								if ( ((Tank_Y_Pos + Tank_Size + Tank_Y_Step) < Tank_Y_Max ))
									begin
										if ((TankX+Tank_Size > WallX1) && (TankX < WallX1 + WallXSize1))//within the bounds of the wall
										begin
											if(Tank_Y_Pos + Tank_Size + Tank_Y_Step != WallY1)
												begin
													Tank_X_Pos <= Tank_X_Pos;
													Tank_Y_Pos<=Tank_Y_Pos+ (Tank_Y_Step); 				
												end
										end
										else 
										begin
												Tank_X_Pos <= Tank_X_Pos;
												Tank_Y_Pos<=Tank_Y_Pos+ (Tank_Y_Step);
										end
									end
							end
						8'h04: //left
							begin
							TankType <=2'b01;
								if(((Tank_X_Pos + (~ (Tank_X_Step) + 1'b1)) > Tank_X_Min))
									begin
									if((TankY +Tank_Size >= WallY1) && (TankY <= WallY1 + WallYSize1))//within the bounds of wall
										begin
											if(((Tank_X_Pos + (~ (Tank_X_Step) + 1'b1)) != WallX1 + WallXSize1))
											begin
												Tank_Y_Pos <= Tank_Y_Pos;
												Tank_X_Pos<=Tank_X_Pos+ (~ (Tank_X_Step) + 1'b1); 
											end
										end
									else
										begin
											Tank_Y_Pos <= Tank_Y_Pos;
											Tank_X_Pos<=Tank_X_Pos+ (~ (Tank_X_Step) + 1'b1); 
										end
									end
							end
						8'h07: //right
							begin
							TankType <=2'b11;
								if ( ((Tank_X_Pos + Tank_Size + Tank_X_Step) < Tank_X_Max) )
								begin
									if((TankY +Tank_Size >= WallY1) && (TankY <= WallY1 + WallYSize1))
									begin
										if((Tank_X_Pos + Tank_Size + (Tank_X_Step) != WallX1))
										begin
											Tank_Y_Pos <= Tank_Y_Pos;
											Tank_X_Pos<=Tank_X_Pos+  (Tank_X_Step); 	
										end
									end
									else
									begin
										Tank_Y_Pos <= Tank_Y_Pos;
										Tank_X_Pos<=Tank_X_Pos+  (Tank_X_Step);
									end
								end
							end
							
						8'h2c: //space key for missile
							begin
								if (TankType == 2'b00)//up
								begin
									Xstart <= Tank_X_Pos + 10'd4;
									Ystart <= Tank_Y_Pos;
									Missile_on <= 1'b1;
									
								end
								else if (TankType == 2'b01)//left
								begin
									Xstart <= Tank_X_Pos;
									Ystart <= Tank_Y_Pos + 10'd4;
									Missile_on <= 1'b1;
									
								end
								else if (TankType == 2'b10)//down
								begin
									Xstart <= Tank_X_Pos + 10'd4;
									Ystart <= Tank_Y_Pos + 10'd16;
									Missile_on <= 1'b1;
									
								end
								else 								//right
								begin
									Xstart <= Tank_X_Pos + 10'd16;
									Ystart <= Tank_Y_Pos + 10'd4;
									Missile_on <= 1'b1;
									
								end
							end
							
						default:
							begin
							Missile_on <= 1'b0;
							end
							
				endcase
				
				 /*if ( ((Tank_Y_Pos + Tank_Size) >= Tank_Y_Max) )
				 begin
						Tank_Y_Motion <= 0;//(~ (Tank_Y_Step) + 1'b1);  // 2's complement.	
						Tank_X_Motion <= 10'd0;
				 end
				 else if(((Tank_Y_Pos) <= Tank_Y_Min))
				 begin
					   Tank_Y_Motion <= 0;//Tank_Y_Step;
						Tank_X_Motion <= 10'd0;
				 end
				 if ( ((Tank_X_Pos + Tank_Size) >= Tank_X_Max) )
				 begin
						Tank_X_Motion <= 0;//(~ (Tank_X_Step) + 1'b1);  // 2's complement.	
						Tank_Y_Motion <= 10'd0;
				 end
				 else if(((Tank_X_Pos) <= Tank_X_Min))
				 begin
					   Tank_X_Motion <= 0;//Tank_X_Step;
						Tank_Y_Motion <= 10'd0;
				 end
				 
				 Tank_Y_Pos <= (Tank_Y_Pos + Tank_Y_Motion);  // Update Tank position
				 Tank_X_Pos <= (Tank_X_Pos + Tank_X_Motion);
					*/
			
      
			
		end  
    end
	 
	/* always_comb 
				begin:tank_type
					
					case (keycode)
						8'h1a: //up
							begin
								TankType = 2'b00;					
							end
						8'h16: //down
							begin
								TankType = 2'b10;
							end
						8'h04: //left
							begin
								TankType = 2'b01;
							end
						8'h07: //right
							begin
								TankType = 2'b11;
							end
						default:
							begin
								TankType = 2'b00;
							end
					endcase
				end*/
       
    assign TankX = Tank_X_Pos;
   
    assign TankY = Tank_Y_Pos;
    

endmodule
